<apex:page controller="RDSMISController" cache="true" sidebar="false" showChat="false" showHeader="false" standardStylesheets="false" applyBodyTag="false" applyHtmlTag="false" docType="html-5.0" id="test">
    <style type="text/css">
        .selectedSiteHighlighted{ background-color:#F5F5F5 !important;}
        #finalSites {
            overflow-y: auto;
            background: #fff;
            border: 1px solid #ddd;
            margin-top:45px;
            width:100%;
            float: left;
            line-height:16px;
        }
        #finalSites a{
            color: #3bc1f4;
            font-size: 16px !important;
        }
        #finalSites .siteAddress{
            color: #777 !important;
            border-bottom: 0 !important;
            font-size: 16px !important;
        }
        #finalSites .singleSiteBlock{
            padding:10px !important;
        }       
        .top-m-25{margin-top:25px;}
        #customerDetailsTable tr td {
            border: 0px;
            font-size:16px !important;
        }
        #customerDetailsTable tr td.first-cell {
            padding: 8px 8px 8px 0;
        }        
        #customerDetailsTable tr td.last-cell {
            padding: 8px 0 8px 8px;
        }
        #customerDetailsTable tr td h3 {
            font-size: 24px;
            line-height: 34px;
        }
        tbody tr:nth-child(odd),tbody tr:nth-child(even) {
            background: none !important;
        }
        #manage_content label, .manage_content label{
            font-family: omnesatt_iiregular !important;
            font-size:16px;
        }
        fieldset label{
            margin: 7px 0 !important;
            font-weight:normal;
        }
        .intractiveIcon {
            color: #000 !important;
        }
        .table{
            margin-bottom:0 !important;
        }
        .darkDiv {
            background: #E6E6E6;
            margin: 10px 0;
            padding: 10px 20px;
            font-family: omnesatt_iiregular !important;
        }
        .passwordFieldSelector1_error{
            width:810px !important;
            margin-top :-15px ! important;
        }
        .passwordFieldSelector2_error{
           width:810px !important;
           margin-top :-14px ! important;
        }
        .tooltipTrigger {
            cursor: pointer;
        }
        .tooltip > .tooltip-inner {
            background-color: #fff;
            color: #000;
            text-align:left;
        }
        .radioSpacer label{padding-left: 10px;font-family: omnes_light !important;}
        .form-group {font-family: omnes_light;}
        /* Styles added for the error messages to appear correctly */
            
        .validataionSelector {
            height: 90px;
        }
        /* Error message class */
        .requiredInputFieldNumber_error{
            width:900px !important;
        }
        .requiredInputFieldNumberipv6_error{
             width:900px !important;
        }
        /* Overwrite bootstrap */        
        .btn-default.disabled {
            color: white;
            background-color: #056fab;
        }
        .cosSliderLabelsProgress {
            position: absolute;
            top: 1px;
            left: 25px;
            z-index: 2;
            color: #000;
            height: 32px;
            margin-top: 5px;
            font-weight:500 !important;
            font-family: omnes_att_iimedium !important;
            line-height:21px !important;
            font-size: 15px !important;
        }
        .cosSliderLabelsMax {
            position: absolute;
            top: 8px;
            right: 15px;
            //z-index: 999999;
            color: #4ca90c;
            font-weight:500;
            font-family: omnes_att_iimedium;
            line-height:21px;
            font-size: 15px;            
        }
        
        .btn-complete-parent-disabled {
            cursor: not-allowed;
        }
        h3.f-s-larger {
            padding: 10px 0 !important;
        }
        h3 span {
            font-size: 12px !important;
        }
        .breather {
            padding: 10px 0 !important;
        }
        /* End Addition of styles from the original RDSSiteConfig page */
        /* Begin styles for MISRDS page*/
        .dashborder {
            border-bottom: 1px dashed #ddd;
        }
        div.errorMessages {
            margin: 10px 0;
            color: #cc0000;
            font-weight: bold;
        }
        /* Add a margin of 20px to the row container */
        
        .row-additional-spacing-top {
            margin-top: 20px;
        }
        
        .row-internal-additional-spacing-top {
            margin-top: 10px;
        }
        /* Select dropdown for IPType */
        
        select.form-select-IPType {
            width: 260px;
            height: 30px;
            border-radius: 2px;
        }
        /* Prevent the -30 from applying to the error message */
        
        .message.errorM3 {
            margin-top: 0 !important;
        }
        /* End styles for MISRDS page*/
        /*Add some breather around label*/
        
        /*.row .form-group label {
            padding-bottom: 10px;
        }*/
        
        .rowAligned {
            margin-left: -30px !important;
        }
        /*Calendar related styles - Start*/
        
        span.calendarIcon,
        span.calendarToolTip {
            height: 100% !important;
            font-size: 22px;
            line-height: 1.33;
            margin-left: 10px;
            cursor: pointer;
        }
        
        .ui-widget {
            font-family: inherit !important;
            font-size: inherit !important;
        }
        
        .ui-widget-header {
            border: 1px solid cornflowerblue !important;
            background: cornflowerblue !important;
            color: Black;
            font-weight: bold;
        }
        /*Calendar related styles - End*/
        
        /* style added to target the slider background-color when selecting the real-time percentage  */
        .ui-slider-range {
            background-color: #4ca90c !important;
            border: none !important;
        }
        
        #progressbar {
            height: 20px;
        }
        .siteInfoTxtSty{
            color:#ef6f00;
            font-size:16px;
            line-height:1.1em;
            margin:10px 0;
        }
        #legend label{
            margin-top: 8px !important;
        }
        .col-xs-4 {     
            width: 39.333333%;      
        }
        div.legendItem {
            margin-top: 5px;
        }
        .activeSite {
            background-color: #f5f5f5;
        }
        .select-small select {
            -moz-appearance: none;
        }
        
        .ui-slider .ui-slider-handle {
            height: 2.5em;
            width: 10px;
            margin-left: -4px;
        } 
        /* Developers Note Robyn 12/28/15: added style */
        /* applies Omnes Regular Weight Font, used in a label with medium and regular omnes fonts */
        .regular {
            font-family: 'omnesatt_iiregular';
        } 
        input[type="radio"], input.radio, input.checkbox {
            margin:10px 3px 0 0 !important;
        } 
        .lan-adr-type label {
            margin:6px 20px 0 0 !important; /* Robyn 2/21: update margin */
            style=text-align:center;
        }
        .bg-slash {
            background: #fff url({!$Resource.slash}) no-repeat 2px 5px;
            background-size: 12px;
            padding-left: 13px !important;
        }
        /* Robyn 2/21 fix new styles */
        .lan-table { background: #fff; margin-bottom: 10px;}
        .lan-table label {margin: 6px 0 0 0;}
        .table-bordered thead tr th, table thead tr {
            background: #fff;
            border-bottom: 1px dashed #ddd !important;
        }
        .dataTables_wrapper tbody td {
            border-style: dashed !important;  
        } 
                #POTS_SectionId .tooltip-inner{
                max-width: 270px;
                padding: 17px 5px;
                color: #000;
                text-align: center;
                text-decoration: none;
                background-color: #fff;
                border-radius: 4px;
            }
            #POTS_SectionId .tooltip-arrow{ 
                border-right-color: #fff;
                border-right: 10px solid #fff;
            }
            textarea.form-control {
                color: #555;
                font-size: 14px;
                }
           .shippinginfo_State_error {
                margin-top: 2px !important;
                }
            .axisPlacementStyle{
                font-weight: 500;
                font-family: omnes_att_iimedium;
                line-height:21px; 
                color: #000000;
                font-size: 15px;
            }
    </style>

    <style type="text/css">
        .section-dividerHr{
            width:100%;
            clear:both;
            margin:40px 0;
            float:left;
            border-bottom:1px solid #d3d3d3;
        }
        .sectionHeader-primary{
            font-size:22px;
        }
        .sectionHeader-secondary{
            font-weight:bold;
        }
        .m-b-25{
            margin-bottom:25px !important;
        }
        .m-b-15{
            margin-bottom:15px !important;
        }        
        .m-b-10{
            margin-bottom:10px !important;
        }
        .m-t-10{
            margin-top:10px !important;
        }
        .m-t-15{
            margin-top:15px !important;
        }        
        .m-t-25{
            margin-top:25px !important;
        }         
        .m-r-3P{
            margin-right:3%;
        }
        .addressFields li{
            width:31%;
            display: inline-block;
        }
        .radioFields label{
            font-family: omnesatt_iiregular;
            margin: 0 25px 0 0;
        }
        .radioFields input{
             margin-right: 10px !important;
        }       
        .radioFields .errorText{
            margin-top: -10px !important;
        }
        .errorText{
            color:#cf2a2a !important;
            font-weight:bold;
            float:left
        }
        .orangeText{
            color: #ea7400 !important;
            font-family: omnes_att_iimedium;
        }
        .naviagtionOrangeLink{
            float:right;
            margin-bottom: 25px;
        }
        .naviagtionOrangeLink p{
            margin-bottom:5px;
        }
        .naviagtionOrangeLink p:first-child{
            float:right;
        }        
        .linkToNavigate{
            float: right;
            color: #0568ae !important;
            font-family: omnes_att_iimedium;
            font-weight: bold; 
        }
        .pageNavigationBtnSection{
            margin:40px 0 40px 0;
            float:right;
        }
        .pageNavigationBtnSection li{
            display:inline;
            border:1px solid #939393;
            border-right:none;
            cursor:pointer;
            padding: 5px 25px;
            background-color: rgb(210,210,210);
            color: #000; 
            font-family: omnes_att_iimedium;
        }
        .pageNavigationBtnSection li:first-child{
            border-radius:6px 0 0 6px;
            margin-right: -3px;
        }
        .pageNavigationBtnSection li:first-child.currentPage {
            margin-right: -8px;
        }        
        .pageNavigationBtnSection li:last-child{
            border-right:1px solid #939393;
            border-radius:0 6px 6px 0;
            margin-left: -3px;
        }
        .pageNavigationBtnSection li:last-child .inCompletePage {
            border-color:#red;
        }        
        .pageNavigationBtnSection .completedPage{
            background-color: #fff !important;
            color: #0568ae !important;
            padding: 5px 13px 5px 39px !important;
        } 
        .pageNavigationBtnSection .inCompletePage{
            background-color: #fff !important;
            color: red !important;
            border-color:red !important;
        }
        .pageNavigationBtnSection .currentPage{
            background-color: #0568ae !important;
            color: #fff !important;
            border-color: #939393 !important;
        }
        .statusImgSuccess{
            background-image: url("{!URLFOR($Resource.legendicons,'icon_circle_check.png')}");
            background-size: 25px 25px;
            background-repeat: no-repeat;
            background-position: 14% 50%;
            margin-left: 5px;       
        }        
        .dividerHr{clear:both;}
        .blue_hr{
            width:100%;
            float:left;
        }
        .scrollToTop{
            width:75px; 
            height:100px;
            padding:10px; 
            text-align:center; 
            font-weight: bold;
            color: #444;
            position:fixed;
            bottom: 55px;
            right:40px;
            z-index:9999;
            background: url('{!$Resource.TopArrow}') no-repeat 0px 20px;
        }
        .tooltip{
            position:absolute !important;
        }        
        .tooltip.right .tooltip-arrow{
            border-right-color:#fff !important;
        }
        .tooltip.bottom .tooltip-arrow{
            border-bottom-color:#fff !important;
        }
        .errorFieldBorderColor{
            border-color:#a94442 !important;
            height:34px !important;
        }
        .ipv4CriteriaBox {
            position: relative;
            background: #ffffff;
            border: 2px solid #70c4e8;
            border-radius: 5px;
            padding:25px;
            margin-top: 20px;
        }
        .ipv4CriteriaBox:after, .ipv4CriteriaBox:before {
            bottom: 100%;
            left: 32%;
            border: solid transparent;
            content: " ";
            height: 0;
            width: 0;
            position: absolute;
            pointer-events: none;
        }
        
        .ipv4CriteriaBox:after {
            border-color: rgba(136, 183, 213, 0);
            border-bottom-color: #ffffff;
            border-width: 20px;
            margin-left: -30px;
        }
        .ipv4CriteriaBox:before {
            border-color: rgba(194, 225, 245, 0);
            border-bottom-color: #70c4e8;
            border-width: 24px;
            margin-left: -34px;
        }
        .ipv4CriteriaBox .criteriaHeader{
            margin: 0 0 10px 2px !important;
        }        
        .ipv4CriteriaBox .ipv4CriteriaOptions td{
            display:block;
        }
        .ipv4CriteriaBox .ipv4CriteriaOptions label{
            margin: 5px 0!important;
            font-family: omnesatt_iiregular;        
        }        
        .ipv4CriteriaBox .ipv4CriteriaOptions input[type="radio"]{
            margin: 5px 10px 0 0 !important;
        }
        .popover{
            z-index:99 !important;
        }
    </style>

    <apex:form >
        <a href="#" class="scrollToTop"></a>
        <apex:inputHidden value="{!ciMD5Error}" id="ciError"/>
        <!-- Customer Details -->
        <table id="customerDetailsTable" class="table">
            <tr>
                <td class="first-cell" colspan="4"><h3>{!quoteObj[0].End_Customer__r.Name}</h3></td>
            </tr>
            <tr>
                <td class="first-cell"><strong>Quote Name</strong> {!quoteObj[0].Apttus_Proposal__Proposal_Name__c}</td>
                <td><strong>Quote ID</strong> {!quoteObj[0].Name}</td>
                <td><strong>Product</strong> {!quoteObj[0].Product__r.name}</td>
                <td align="right" class="last-cell"><strong>Term</strong> {!quoteObj[0].Apttus_Proposal__Payment_Term__c}</td>
            </tr>
        </table>
        <hr class="blue_hr" id="top_bar" />
        <div id="dispCIMsgId" style="position:relative;bottom:10px;color:#a94442;"></div>        
    </apex:form>

    <div class="row">
        <apex:form id="leftPanelContainerForm">
            <div class="col-xs-3 pull" id="leftPanelContainer" style="z-index:1;">
                <h3 style="margin-bottom: 25px;">Site List</h3>
                <div id="siteCountsDiv1" style="color: orange; font-weight: bold;float:left;">{!noOfConfigedSites} of {!TotalSitesCount} {!$Label.Sites_Completed}</div>
                <div class="styled-select-small adjust-select-small" style="width:100%;float: left;">
                    <apex:selectList id="optgrp" styleClass="form-control" style="width: 100%;margin-top:-4px;-moz-appearance: none;" value="{!selectedFilter}" size="1" rendered="true">
                        <apex:selectOptions value="{!FilterOptions}"/>
                        <apex:actionsupport event="onchange" action="{!handlefilterSites}" reRender="leftPanelContainerForm" oncomplete="" status="loading"/>
                    </apex:selectList>
                </div>
                
                <div id="finalSites">
                    <apex:repeat value="{!listCustomerSiteMaster}" var="item" >
                        <div class="panel-heading singleSiteBlock dashborder {!IF(item.custSiteIns.Id == siteselected,'activeSite','')}">
                            <table>
                                <tr>
                                    <td style="width:210px;">
                                        <apex:commandLink value="{!item.custSiteIns.Site_Name__c}" onclick="getSiteId('{!item.custSiteIns.Id}','{!MISRDSPageNumber}');return false;">
                                            <div class="siteAddress">{!item.custSiteIns.Address_Line__c}, {!item.custSiteIns.City__c}, {!item.custSiteIns.State__c} {!item.custSiteIns.Zip_Code__c}</div>
                                        </apex:commandLink>
                                    </td>
                                    <td style="vertical-align:middle;">
                                        <apex:outputPanel rendered="{!item.custSiteIns.RDS_Submitted__c}">
                                            <apex:image url="{!URLFOR($Resource.legendicons,'icon_circle_check.png')}" style="width: 25px; height: 25px;margin-top: 5px;margin-left:2px;" />
                                        </apex:outputPanel>
                                    </td>
                                </tr>
                            </table>
                        </div>
                    </apex:repeat>
                </div>
            </div>
        </apex:form>
        <!-- End Site List -->
        <div class="col-xs-9" id="pagePanel">
            <apex:outputPanel id="pageBodyContainer">
                <apex:outputPanel id="pagemessages">
                    <div class="errorMessages">
                        <apex:pageMessages escape="true"></apex:pageMessages>
                    </div>
                </apex:outputPanel>
                <script>
                    function displaycrddoverlay(){
                        var CRDDPopUpValue = '{!CRDDPopUp}';
                        System.debug('CRDDPopUp==',CRDDPopUpValue);
                        if ( CRDDPopUpValue == 'true')
                            document.getElementById(crddoverlaycontainerid).style.display = 'block';        
                    }
                </script>
                <apex:outputPanel rendered="{!IF(isIPFlexEnabled == true,true,false)}">
                    <h3 class="m-b-25">Site Information - page {!MISRDSPageNumber} &nbsp;of &nbsp;3</h3>
                </apex:outputPanel>
                <apex:outputPanel rendered="{!IF(isIPFlexEnabled == true,false,true)}">
                    <h3 class="m-b-25">Site Information - page 1 &nbsp;of &nbsp;1</h3>
                </apex:outputPanel>                
                <h4>Site Name:  {!SiteNameSelected}</h4> 
                <h5 class="m-b-25">{!SelectedSiteAddress}</h5>
                                            
                <apex:include pageName="MIS_RDS_IPFlex_Page1"  rendered="{!showFirstMISRDSPage}"/>
                <apex:include pageName="MIS_RDS_IPFlex_Page2" rendered="{!showSecondMISRDSPage}"/>
                <apex:include pageName="MIS_RDS_IPFlex_Page3" rendered="{!showThirdMISRDSPage}"/>
            </apex:outputPanel>
        </div>
    </div>
    
    <script type="text/javascript">
        $(document).ready(function($){
            //To trigger tooltip
            $(function () {
                $("[rel='tooltip']").tooltip();
                $(".tooltipTrigger").tooltip();
            });
            
            //Check to see if the window is top if not then display button
            $(window).scroll(function(){
                if ($(this).scrollTop() > 50) {
                    $('.scrollToTop').fadeIn();
                } else {
                    $('.scrollToTop').fadeOut();
                }
            });
            
            //Click event to scroll to top
            $('.scrollToTop').click(function(){
                $('html, body').animate({scrollTop : 0},300);
                return false;
            });                     
        });
        
        var urlRegex = /^(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/\S*)?$/i;
        var emailReg = /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/;
        var specialChars = "0123456789<>@!#$%^&*()_+[]{}?:;|'\"\\,./~`-="
        var specialCharForNPANXX = "<>@!#$%^&*()_+[]{}?:;|'\"\\/,.~`-="
        
        function isValidURL(value) {
            return urlRegex.test(value);
        } 
        
        function checkNames(string){
            for(i = 0; i < specialChars.length;i++){
                if(string.indexOf(specialChars[i]) > -1){
                    return true
                }
            }
            return false;
        }
        
        function validateEmail($email) {
            return emailReg.test( $email );
        }

        function checkNPANXX(string){
            for(i = 0; i < specialCharForNPANXX.length;i++){
                if(string.indexOf(specialCharForNPANXX[i]) > -1){
                    return true
                }
            }
            return false;
        }
        
        var primaryFirstName;
        var secondaryFirstName;
        var primaryLastName;
        var secondaryLastName;
        var primaryBussinessPhoneNumber;
        var secondaryBussinessPhoneNumber;
        var primaryMobilePhoneNumber;
        var secondaryMobilePhoneNumber;
        var primaryEmail;
        var secondaryEmail;
        var validation;    
        var targetPageId;
        var currentPageId;
        var MISRDSPageNumber = '{!MISRDSPageNumber}';
        var MISRDSPage1Status = '{!MISRDSPage1Status}';
        var MISRDSPage2Status = '{!MISRDSPage2Status}';
        var MISRDSPage3Status = '{!MISRDSPage3Status}';
        var isIPFlexEnabled = '{!isIPFlexEnabled}';
        var rdsFlag = 'false';
        
        initializePageValidationOnPageLoad(MISRDSPageNumber,MISRDSPage1Status,MISRDSPage2Status,MISRDSPage3Status);
                
        function pageNavigation(e,currentElement){
            targetPageId = e.target.id;
            if(!(currentElement.className == 'currentPage')){
                $.each(e.target.parentElement.children,function(index,child){
                    var classes = child.className;
                    if ( classes.indexOf('currentPage') !== -1 ) {
                        currentPageId = child.id;
                        return false;
                    }
                });
                if(currentPageId == 'page1'){
                    doFirstPageValidation('onPaginationClick','MISRDSPage1');
                }else if(currentPageId == 'page2'){
                    doPageValidation('onPaginationClick','MISRDSPage2');
                }else{
                    doPageValidation('onPaginationClick','MISRDSPage3');
                }
            }        
        };
  
        function initializePageValidationOnPageLoad(pageNumber,pageOneStatus,pageTwoStatus,pageThreeStatus){
            MISRDSPageNumber = pageNumber;
            MISRDSPage1Status = pageOneStatus;
            MISRDSPage2Status = pageTwoStatus;
            MISRDSPage3Status = pageThreeStatus; 

            if(isIPFlexEnabled == 'true'){
                if(pageOneStatus == 'completelyFilled' && pageTwoStatus == 'completelyFilled' && pageThreeStatus == 'completelyFilled'){
                    $('.SubmitBtn').prop('disabled', false); 
                }else{
                    if(pageNumber == '1'){
                        if(pageOneStatus == 'partiallyFilled'){
                            doFirstPageValidation('initialLoad','MISRDSPage1');
                        }
                    }else if(pageNumber == '2'){
                        if(pageTwoStatus == 'partiallyFilled'){
                            doPageValidation('initialLoad','MISRDSPage2');            
                        }
                    }else{
                        if(pageThreeStatus == 'partiallyFilled'){
                            doPageValidation('initialLoad','MISRDSPage3');            
                        }
                    }            
                }  
            }else{
                if(pageOneStatus == 'completelyFilled'){
                    $('.SubmitBtn').prop('disabled', false); 
                }else if(pageOneStatus == 'partiallyFilled'){
                     doFirstPageValidation('initialLoad','MISRDSPage1');
                }
            }
            window.scrollTo(0, 0);
        };

        function doFirstPageValidation(event,classNameOFPage){
            
            validation = true;
            var errorMsg = "<div class='m-t-10 errorText'></div>";
            //validations for input fields
            $('.'+classNameOFPage+' input.required').each(function() {
                var errorMsg = "<div class='m-t-10 errorText'></div>";
                if($(this).parent().children('.errorText').length > 0){
                    validation = false;
                }else{
                    if(!$(this).val()){
                        $(this).parent().append(errorMsg);
                        $(this).addClass('errorFieldBorderColor');
                        if($(this).parent().attr("id") == 'siteLandLinePhnNum'){
                            $(this).parent().find('.errorText').text('Site Phone Number cannot be blank'); 
                        }else if($(this).parent().attr("id") == 'firstName'){
                            $(this).parent().find('.errorText').text('First Name cannot be blank');
                        }else if($(this).parent().attr("id") == 'lastName'){
                            $(this).parent().find('.errorText').text('Last Name cannot be blank');
                        }else if($(this).parent().attr("id") == 'email'){
                            $(this).parent().find('.errorText').text('Email Address cannot be blank');
                        }else if($(this).parent().attr("id") == 'phoneNumber'){
                            $(this).parent().find('.errorText').text('Phone number cannot be blank');
                        }else if($(this).parent().attr("id") == 'mobileNumber'){
                            $(this).parent().find('.errorText').text('Mobile number cannot be blank');
                        }else if($(this).parent().attr("id") == 'dateField'){
                            $(this).parent().find('.errorText').text('Select a Customer Requested Due Date (CRDD)');
                        }else if($(this).parent().attr("class") == 'DomainURL'){
                            $(this).parent().find('.errorText').text('URL value cannot be blank');
                        }else if($(this).parent().attr("id") == 'floorNumber'){
                            $(this).parent().find('.errorText').text('Floor Number cannot be blank');
                        }else if($(this).parent().attr("id") == 'roomNumber'){
                            $(this).parent().find('.errorText').text('Room Number cannot be blank');
                        }else if($(this).parent().attr("class") == 'SitesPhnNo'){
                            $(this).parent().find('.errorText').text('Cannot be blank');
                        }else if($(this).parent().attr("class") == 'ipv4Md5PasswordField' || $(this).parent().attr("class") == 'ipv6Md5PasswordField' || $(this).parent().attr("class") == 'reEnterMD5IP4' || $(this).parent().attr("class") == 'reEnterMD5IP6'){
                            $(this).parent().find('.errorText').remove();
                            $(this).removeClass('errorFieldBorderColor');
                        }else{
                            $(this).parent().find('.errorText').text('Cannot be blank');
                        }
                        validation = false;
                    }else{
                        $(this).trigger("keyup");
                    }    
                    
                }
            });
            //validation for radio buttons
            $('.'+classNameOFPage+' fieldset table.required').each(function() {
                if($(this).parent().parent().attr("class") == 'ipv4CriteriaBox'){
                    if($('.ipv4CriteriaBox').parent().find('.errorText').length > 0){
                        validation = false;
                    }else{
                        if ($(this).find('input:radio:checked').length === 0){
                            $('.ipv4CriteriaBox').parent().append(errorMsg);
                            $('.ipv4CriteriaBox').parent().find('.errorText').addClass('col-md-12 p0');
                            $('.ipv4CriteriaBox').parent().find('.errorText').text('Selection required');                        
                            $(this).addClass('errorFieldBorderColor');
                            validation = false;
                        }                       
                    }
                }else{
                    if($(this).parent().children('.errorText').length > 0){
                        validation = false;
                    }else{
                        if ($(this).find('input:radio:checked').length === 0){
                            $(this).parent().append(errorMsg);
                            $(this).parent().find('.errorText').text('Selection required');                        
                            $(this).addClass('errorFieldBorderColor');
                            validation = false;
                        }                
                    }                 
                }  
               
            });  
            // validation for Dropdowns
            $('.'+classNameOFPage+' select.required').each(function() {
                if($(this).parent().children('.errorText').length > 0){
                    validation = false;
                }else{
                   if(!$(this).val()){
                        $(this).parent().append(errorMsg);
                        $(this).parent().find('.errorText').text('Selection required');
                        $(this).addClass('errorFieldBorderColor');
                        validation = false;
                    }               
                }                 
            });
            if(event == "onPaginationClick"){
                if(validation){
                    //name of Apex function          
                    saveCurrentPageData(currentPageId,'completelyFilled');                
                }else{
                    //name of Apex function
                    showErrorMsgAtNavigation();
                }            
            }        
        };
        
        function doPageValidation(event,classNameOFPage){
            validation = true;
            var errorMsg = "<div class='m-t-10 errorText'></div>";
            
            //validations for input fields
            $('.'+classNameOFPage+' input.required').each(function() {
                if($(this).parent().children('.errorText').length > 0){
                    validation = false;
                }else if($(this).parent().attr("class") == 'CSRFile'){
                    if(Object.keys(CSRFilesObject).length === 2){
                        $(this).parent().append(errorMsg);
                        $(this).parent().find('.errorText').text('One uploaded file is required.'); 
                        $(this).addClass('errorFieldBorderColor');
                        validation = false;
                    }
                }else{
                    if(!$(this).val()){
                        $(this).parent().append(errorMsg);
                        $(this).parent().find('.errorText').text('Cannot be blank'); 
                        $(this).addClass('errorFieldBorderColor');
                        validation = false;
                    }else{
                        $(this).trigger("keyup");
                    }                
                }
            });
            //validation for radio buttons
            $('.'+classNameOFPage+' fieldset table.required').each(function() {
                if($(this).parent().children('.errorText').length > 0){
                    validation = false;
                }else{
                    if ($(this).find('input:radio:checked').length === 0){
                        $(this).parent().append(errorMsg);
                        $(this).parent().find('.errorText').text('Selection required'); 
                        $(this).addClass('errorFieldBorderColor');
                        validation = false;
                    }                
                }                
            }); 
            
            // validation for Dropdowns
            $('.'+classNameOFPage+' select.required').each(function() {
                if($(this).parent().children('.errorText').length > 0){
                    validation = false;
                }else{
                    if(!$(this).val()){
                        $(this).parent().append(errorMsg);
                        $(this).parent().find('.errorText').text('Selection required');
                        $(this).addClass('errorFieldBorderColor');
                        validation = false;
                    }               
                }                 
            }); 
            if(event == "onPaginationClick"){
                if(validation){
                    //name of Apex function          
                    saveCurrentPageData(currentPageId,'completelyFilled');                
                }else{
                    //name of Apex function
                    showErrorMsgAtNavigation();
                }            
            }          
        };

        function navigateOnLink(pageNumber){
            //name of Apex function
            if(pageNumber == '1'){
                doFirstPageValidation('onNavigationLink','MISRDSPage1');
            }else if(pageNumber == '2'){
                doPageValidation('onNavigationLink','MISRDSPage2'); 
            }else{
                doPageValidation('onNavigationLink','MISRDSPage3');
            }
            if(validation){
                currentPageStatus = 'completelyFilled';
            }else{
                currentPageStatus = 'partiallyFilled';
            }
            saveCurrentPageData(currentPageId,currentPageStatus);
        }
    
        function dataSavedOnCurrentPage(){
            //name of Apex function
            navigateToNewPage(targetPageId);         
        }

        function fieldValidationForFirstPage(event,currentField,typeOfField){
            if(event.keyCode != 9){
                var enteredValue = currentField.value;
                var elementName = currentField.name;
                var currentElement = $('input[name="' + elementName + '"]');
                var parentElement = currentElement.parent();
                var errorMsg = "<div class='m-t-10 errorText'></div>";
                parentElement.find('.errorText').remove();
                currentElement.removeClass('errorFieldBorderColor');
                if(typeOfField == 'siteLandLinePhnNum'){
                    if(enteredValue.length > 0){
                        if(enteredValue.charAt(0) === ' '){
                            parentElement.append(errorMsg);
                            parentElement.find('.errorText').text('Site Phone Number should not begin with a space');
                            currentElement.addClass('errorFieldBorderColor');
                        }else if(!($.isNumeric(enteredValue)) || enteredValue.indexOf(' ') >= 0){
                            parentElement.append(errorMsg);
                            parentElement.find('.errorText').text('Invalid Site Phone Number');
                            currentElement.addClass('errorFieldBorderColor');
                        }else if(enteredValue.length < 10 || enteredValue.length > 10){
                            parentElement.append(errorMsg);
                            parentElement.find('.errorText').text('Site Phone Number must be ten digits');
                            currentElement.addClass('errorFieldBorderColor');
                        }else{
                            parentElement.find('.errorText').remove();
                            currentElement.removeClass('errorFieldBorderColor');
                        }                
                    }else{
                        parentElement.append(errorMsg);
                        parentElement.find('.errorText').text('Site Phone Number cannot be blank');
                        currentElement.addClass('errorFieldBorderColor');
                    }                 
                }else if(typeOfField == 'firstName' || typeOfField == 'primaryFirstName' || typeOfField == 'secondaryFirstName'){
                    if(enteredValue.length > 0){
                        if(enteredValue.charAt(0) === ' '){
                            parentElement.append(errorMsg);
                            currentElement.addClass('errorFieldBorderColor');
                            parentElement.find('.errorText').text('First Name should not begin with a space');
                        }else if(checkNames(enteredValue)){
                            parentElement.append(errorMsg);
                            parentElement.find('.errorText').text('Numbers or special characters are not allowed');
                            currentElement.addClass('errorFieldBorderColor');
                        }else{
                            if(typeOfField == 'primaryFirstName'){
                                primaryFirstName = enteredValue;
                                if(primaryFirstName == secondaryFirstName){
                                    parentElement.append(errorMsg);
                                    parentElement.find('.errorText').text('Primary and alternate contacts cannot be the same');
                                    currentElement.addClass('errorFieldBorderColor');
                                }else{
                            parentElement.find('.errorText').remove();
                            currentElement.removeClass('errorFieldBorderColor');
                                }
                            }else if(typeOfField == 'secondaryFirstName'){
                                secondaryFirstName = enteredValue;
                                if(secondaryFirstName == primaryFirstName){
                                    parentElement.append(errorMsg);
                                    parentElement.find('.errorText').text('Primary and alternate contacts cannot be the same');
                                    currentElement.addClass('errorFieldBorderColor');
                                }else{
                                    parentElement.find('.errorText').remove();
                                    currentElement.removeClass('errorFieldBorderColor');
                                }
                            }else{
                                parentElement.find('.errorText').remove();
                                currentElement.removeClass('errorFieldBorderColor');
                            }
                        }                
                    }else{
                        parentElement.append(errorMsg);
                        parentElement.find('.errorText').text('First Name cannot be blank');
                        currentElement.addClass('errorFieldBorderColor');
                    }                
                }else if(typeOfField == 'lastName' || typeOfField == 'primaryLastName' || typeOfField == 'secondaryLastName'){
                    if(enteredValue.length > 0){
                        if(enteredValue.charAt(0) === ' '){
                            parentElement.append(errorMsg);
                            currentElement.addClass('errorFieldBorderColor');
                            parentElement.find('.errorText').text('Last Name should not begin with a space');
                        }else if(checkNames(enteredValue)){
                            parentElement.append(errorMsg);
                            parentElement.find('.errorText').text('Numbers or special characters are not allowed');
                            currentElement.addClass('errorFieldBorderColor');
                        }else{
                            if(typeOfField == 'primaryLastName'){
                                primaryLastName = enteredValue;
                                if(primaryLastName == secondaryLastName){
                                    parentElement.append(errorMsg);
                                    parentElement.find('.errorText').text('Primary and alternate contacts cannot be the same');
                                    currentElement.addClass('errorFieldBorderColor');
                                }else{
                            parentElement.find('.errorText').remove();
                            currentElement.removeClass('errorFieldBorderColor');
                                }
                            }else if(typeOfField == 'secondaryLastName'){
                                secondaryLastName = enteredValue;
                                if(secondaryLastName == primaryLastName){
                                    parentElement.append(errorMsg);
                                    parentElement.find('.errorText').text('Primary and alternate contacts cannot be the same');
                                    currentElement.addClass('errorFieldBorderColor');
                                }else{
                                    parentElement.find('.errorText').remove();
                                    currentElement.removeClass('errorFieldBorderColor');
                                }
                            }else{
                                parentElement.find('.errorText').remove();
                                currentElement.removeClass('errorFieldBorderColor');
                            }
                        }                
                    }else{
                        parentElement.append(errorMsg);
                        parentElement.find('.errorText').text('Last Name cannot be blank');
                        currentElement.addClass('errorFieldBorderColor');
                    }                 
                }else if(typeOfField == 'primaryEmail' || typeOfField == 'secondaryEmail'){
                   if(enteredValue.length > 0){
                        if(enteredValue.charAt(0) === ' '){
                            parentElement.append(errorMsg);
                            parentElement.find('.errorText').text('Email Address should not begin with a space');
                            currentElement.addClass('errorFieldBorderColor');
                        }else{
                            if($.isNumeric(enteredValue) || !validateEmail(enteredValue)){
                                parentElement.append(errorMsg);
                                parentElement.find('.errorText').text('Invalid Email');
                                currentElement.addClass('errorFieldBorderColor');
                            }else{
                                if(typeOfField == 'primaryEmail'){
                                    primaryEmail = enteredValue;
                                    if(primaryEmail == secondaryEmail){
                                        parentElement.append(errorMsg);
                                        parentElement.find('.errorText').text('Primary and alternate emails cannot be the same');
                                        currentElement.addClass('errorFieldBorderColor');
                                    }else{
                                parentElement.find('.errorText').remove();
                                currentElement.removeClass('errorFieldBorderColor');
                                    }                                
                                }else if(typeOfField == 'secondaryEmail'){
                                    secondaryEmail = enteredValue;
                                    if(secondaryEmail == primaryEmail){
                                        parentElement.append(errorMsg);
                                        parentElement.find('.errorText').text('Primary and alternate emails cannot be the same');
                                        currentElement.addClass('errorFieldBorderColor');
                                    }else{
                                        parentElement.find('.errorText').remove();
                                        currentElement.removeClass('errorFieldBorderColor');
                                    }                                
                                }else{
                                    parentElement.find('.errorText').remove();
                                    currentElement.removeClass('errorFieldBorderColor');
                                }
                            }
                        }                
                    }else{
                        parentElement.append(errorMsg);
                        parentElement.find('.errorText').text('Email Address cannot be blank');
                        currentElement.addClass('errorFieldBorderColor');
                    }                
                }else if(typeOfField == 'primaryBussinessPhoneNumber' || typeOfField == 'secondaryBussinessPhoneNumber'){
                    if(enteredValue.length > 0){
                        if(enteredValue.charAt(0) === ' '){
                            parentElement.append(errorMsg);
                            parentElement.find('.errorText').text('Phone Number should not begin with a space');
                            currentElement.addClass('errorFieldBorderColor');
                        }else if(!($.isNumeric(enteredValue)) || enteredValue.indexOf(' ') >= 0){
                            parentElement.append(errorMsg);
                            parentElement.find('.errorText').text('Invalid Phone Number');
                            currentElement.addClass('errorFieldBorderColor');
                        }else if(enteredValue.length < 10 || enteredValue.length > 10){
                            parentElement.append(errorMsg);
                            parentElement.find('.errorText').text('Phone number must be ten digits');
                            currentElement.addClass('errorFieldBorderColor');
                        }else{
                            if(typeOfField == 'primaryBussinessPhoneNumber'){
                            primaryBussinessPhoneNumber = enteredValue;
                            if(primaryBussinessPhoneNumber == secondaryBussinessPhoneNumber){
                                parentElement.append(errorMsg);
                                parentElement.find('.errorText').text('Primary and alternate phone numbers cannot be the same');
                                currentElement.addClass('errorFieldBorderColor');
                                }else{
                                    parentElement.find('.errorText').remove();
                                    currentElement.removeClass('errorFieldBorderColor');                            
                                }                            
                            }else if(typeOfField == 'secondaryBussinessPhoneNumber'){
                                secondaryBussinessPhoneNumber = enteredValue;
                                if(secondaryBussinessPhoneNumber == primaryBussinessPhoneNumber){
                                    parentElement.append(errorMsg);
                                    parentElement.find('.errorText').text('Primary and alternate phone numbers cannot be the same');
                                    currentElement.addClass('errorFieldBorderColor');
                                }else{
                                    parentElement.find('.errorText').remove();
                                    currentElement.removeClass('errorFieldBorderColor');                            
                                }                            
                            }else{
                                parentElement.find('.errorText').remove();
                                currentElement.removeClass('errorFieldBorderColor');                            
                            }
                        }                
                    }else{
                        parentElement.append(errorMsg);
                        parentElement.find('.errorText').text('Phone number cannot be blank');
                        currentElement.addClass('errorFieldBorderColor');
                    }                
                }else if(typeOfField == 'primaryMobilePhoneNumber' || typeOfField == 'secondaryMobilePhoneNumber'){
                   if(enteredValue.length > 0){
                        if(enteredValue.charAt(0) === ' '){
                            parentElement.append(errorMsg);
                            parentElement.find('.errorText').text('Mobile Number should not begin with a space');
                            currentElement.addClass('errorFieldBorderColor');
                        }else if(!($.isNumeric(enteredValue)) || enteredValue.indexOf(' ') >= 0){
                            parentElement.append(errorMsg);
                            parentElement.find('.errorText').text('Invalid Mobile Number');
                            currentElement.addClass('errorFieldBorderColor');
                        }else if(enteredValue.length < 10 || enteredValue.length > 10){
                            parentElement.append(errorMsg);
                            parentElement.find('.errorText').text('Mobile number must be ten digits');
                            currentElement.addClass('errorFieldBorderColor');
                        }else{
                            if(typeOfField == 'primaryMobilePhoneNumber'){
                            primaryMobilePhoneNumber = enteredValue;
                            if(primaryMobilePhoneNumber == secondaryMobilePhoneNumber){
                                parentElement.append(errorMsg);
                                    parentElement.find('.errorText').text('Primary and alternate mobile numbers cannot be the same');
                                currentElement.addClass('errorFieldBorderColor');
                            }else{
                                parentElement.find('.errorText').remove();
                                currentElement.removeClass('errorFieldBorderColor');                            
                            }
                            }else if(typeOfField == 'secondaryMobilePhoneNumber'){
                                secondaryMobilePhoneNumber = enteredValue;
                                if(secondaryMobilePhoneNumber == primaryMobilePhoneNumber){
                                parentElement.append(errorMsg);
                                    parentElement.find('.errorText').text('Primary and alternate mobile numbers cannot be the same');
                                currentElement.addClass('errorFieldBorderColor');
                            }else{
                                parentElement.find('.errorText').remove();
                                currentElement.removeClass('errorFieldBorderColor');                            
                            }
                            }else{
                                parentElement.find('.errorText').remove();
                                currentElement.removeClass('errorFieldBorderColor');                            
                            }
                        }                
                    }else{
                        parentElement.append(errorMsg);
                        parentElement.find('.errorText').text('Mobile Number cannot be blank');
                        currentElement.addClass('errorFieldBorderColor');
                    }                
                }else if(typeOfField == 'dateField'){
                    if(enteredValue.length > 0){
                        parentElement.find('.errorText').remove();
                        currentElement.removeClass('errorFieldBorderColor'); 
                    }else{
                        parentElement.append(errorMsg);
                        parentElement.find('.errorText').text('Select a Customer Requested Due Date (CRDD)');
                        currentElement.addClass('errorFieldBorderColor');
                    }
                }else if(typeOfField == 'POTSPhoneNumber'){
                    if(enteredValue.length > 0){
                        if(enteredValue.charAt(0) === ' '){
                            parentElement.append(errorMsg);
                            parentElement.find('.errorText').text('Phone Number should not begin with a space');
                            currentElement.addClass('errorFieldBorderColor');
                        }else if(!($.isNumeric(enteredValue)) || enteredValue.indexOf(' ') >= 0){
                            parentElement.append(errorMsg);
                            parentElement.find('.errorText').text('Invalid Phone Number');
                            currentElement.addClass('errorFieldBorderColor');
                        }else if(enteredValue.length < 10 || enteredValue.length > 10){
                            parentElement.append(errorMsg);
                            parentElement.find('.errorText').text('Phone number must be ten digits');
                            currentElement.addClass('errorFieldBorderColor');
                        }else{
                            parentElement.find('.errorText').remove();
                            currentElement.removeClass('errorFieldBorderColor'); 
                        }                
                    }else{
                        parentElement.append(errorMsg);
                        parentElement.find('.errorText').text('Cannot be blank');
                        currentElement.addClass('errorFieldBorderColor');
                    }                
                }else if(typeOfField == 'DomainURL'){
                    if(enteredValue.length > 0){
                        if(enteredValue.charAt(0) === ' '){
                            parentElement.append(errorMsg);
                            parentElement.find('.errorText').text('URL value should not begin with a space');
                            currentElement.addClass('errorFieldBorderColor');
                        }else{
                            if(!isValidURL(enteredValue)){
                                parentElement.append(errorMsg);
                                parentElement.find('.errorText').text('Invalid URL');
                                currentElement.addClass('errorFieldBorderColor');
                            }else{
                                parentElement.find('.errorText').remove();
                                currentElement.removeClass('errorFieldBorderColor');
                            }
                        }                
                    }else{
                        parentElement.append(errorMsg);
                        parentElement.find('.errorText').text('URL value cannot be blank');
                        currentElement.addClass('errorFieldBorderColor');
                    }
                }else if(typeOfField == 'FeedBackField'){
                    if(checkNames(enteredValue)){
                        parentElement.append(errorMsg);
                        parentElement.find('.errorText').text('No special characters allowed');
                        parentElement.find('.errorText').addClass("additionalField");
                        currentElement.addClass('errorFieldBorderColor');
                    }else{
                        parentElement.find('.errorText').remove();
                        currentElement.removeClass('errorFieldBorderColor'); 
                    } 
                }else if(typeOfField == 'ASNForIP'){
                    if(enteredValue.length > 0){
                        if(enteredValue.charAt(0) === ' ' || !($.isNumeric(enteredValue)) || enteredValue.indexOf(' ') >= 0 || enteredValue < 64512 || enteredValue > 65534){
                            parentElement.append(errorMsg);
                            parentElement.find('.errorText').text('Invalid Entry');
                            currentElement.addClass('errorFieldBorderColor');
                        }else{
                            parentElement.find('.errorText').remove();
                            currentElement.removeClass('errorFieldBorderColor'); 
                        }                
                    }else{
                        parentElement.append(errorMsg);
                        parentElement.find('.errorText').text('Cannot be blank');
                        currentElement.addClass('errorFieldBorderColor');
                    }                   
                }
                checkIfSubmitBtnCanBeEnabled();
            }
        }
    
        function fieldValidation(event,currentField,typeOfField){
            if(event.keyCode != 9){
                var enteredValue = currentField.value;
                var elementName = currentField.name;
                var currentElement = $('input[name="' + elementName + '"]');
                var parentElement = currentElement.parent();
                var errorMsg = "<div class='m-t-10 errorText'></div>";
                parentElement.find('.errorText').remove();
                currentElement.removeClass('errorFieldBorderColor');
                
                if(typeOfField == 'firstName' || typeOfField == 'lastName'){
                    if(enteredValue.length > 0){
                        if(enteredValue.charAt(0) === ' '){
                            parentElement.append(errorMsg);
                            currentElement.addClass('errorFieldBorderColor');
                            parentElement.find('.errorText').text('Cannot begin with a space');
                        }else if(checkNames(enteredValue)){
                            parentElement.append(errorMsg);
                            parentElement.find('.errorText').text('Numbers or special characters are not allowed');
                            currentElement.addClass('errorFieldBorderColor');
                        }else{
                            if(typeOfField == 'firstName'){
                                if(enteredValue.length > 40){
                                    parentElement.append(errorMsg);
                                    parentElement.find('.errorText').text('Maximum 40 characters');
                                    currentElement.addClass('errorFieldBorderColor');
                                }else{
                            parentElement.find('.errorText').remove();
                            currentElement.removeClass('errorFieldBorderColor');
                                }
                            }else if(typeOfField == 'lastName'){
                                if(enteredValue.length > 80){
                                    parentElement.append(errorMsg);
                                    parentElement.find('.errorText').text('Maximum 80 characters');
                                    currentElement.addClass('errorFieldBorderColor');
                                }else{
                                    parentElement.find('.errorText').remove();
                                    currentElement.removeClass('errorFieldBorderColor');
                                }
                            }else{
                                parentElement.find('.errorText').remove();
                                currentElement.removeClass('errorFieldBorderColor');
                            }
                        }                
                    }else{
                        parentElement.append(errorMsg);
                        parentElement.find('.errorText').text('Cannot be blank');
                        currentElement.addClass('errorFieldBorderColor');
                    }
                }else if(typeOfField == 'email'){
                    if(enteredValue.length > 0){
                        if(enteredValue.charAt(0) === ' '){
                            parentElement.append(errorMsg);
                            parentElement.find('.errorText').text('Cannot begin with a space');
                            currentElement.addClass('errorFieldBorderColor');
                        }else{
                            if($.isNumeric(enteredValue) || !validateEmail(enteredValue)){
                                parentElement.append(errorMsg);
                                parentElement.find('.errorText').text('Invalid Email');
                                currentElement.addClass('errorFieldBorderColor');
                            }else{
                                if(enteredValue.length > 80){
                                    parentElement.append(errorMsg);
                                    parentElement.find('.errorText').text('Maximum 80 characters');
                                    currentElement.addClass('errorFieldBorderColor');
                                }else{
                                parentElement.find('.errorText').remove();
                                currentElement.removeClass('errorFieldBorderColor');
                                }
                            }
                        }                
                    }else{
                        parentElement.append(errorMsg);
                        parentElement.find('.errorText').text('Cannot be blank');
                        currentElement.addClass('errorFieldBorderColor');
                    }
                }else if(typeOfField == 'phoneNumber' || typeOfField == 'optionalPhoneNumber'){
                    if(enteredValue.length > 0){
                        if(enteredValue.charAt(0) === ' '){
                            parentElement.append(errorMsg);
                            parentElement.find('.errorText').text('Cannot begin with a space');
                            currentElement.addClass('errorFieldBorderColor');
                        }else if(!($.isNumeric(enteredValue)) || enteredValue.indexOf(' ') >= 0){
                            parentElement.append(errorMsg);
                            parentElement.find('.errorText').text('Invalid Phone number');
                            currentElement.addClass('errorFieldBorderColor');
                        }else if(enteredValue.length < 10 || enteredValue.length > 10){
                            parentElement.append(errorMsg);
                            parentElement.find('.errorText').text('Must be 10 digits');
                            currentElement.addClass('errorFieldBorderColor');
                        }else{
                            parentElement.find('.errorText').remove();
                            currentElement.removeClass('errorFieldBorderColor');
                        }                
                    }else{
                        if(typeOfField == 'phoneNumber'){
                            parentElement.append(errorMsg);
                            parentElement.find('.errorText').text('Cannot be blank.');
                            currentElement.addClass('errorFieldBorderColor');
                        }
                    }               
                }else if (typeOfField == 'NPANXXCode') {
                    if (enteredValue.length > 0) {
                        if (enteredValue === " " || (enteredValue != enteredValue.trimLeft()) || (enteredValue != enteredValue.trimRight())) {
                            parentElement.append(errorMsg);
                            parentElement.find('.errorText').text('Invalid NPA/NXX');
                            currentElement.addClass('errorFieldBorderColor');
                        } else if ($.isNumeric(enteredValue)) {
                            if ((enteredValue.length > 0 && enteredValue.length < 6) || enteredValue.length > 6) {
                                parentElement.append(errorMsg);
                                parentElement.find('.errorText').text('Must be 6 digits');
                                currentElement.addClass('errorFieldBorderColor');
                            } else {
                                parentElement.find('.errorText').remove();
                                currentElement.removeClass('errorFieldBorderColor');
                            }
                        } else {
                            parentElement.append(errorMsg);
                            parentElement.find('.errorText').text('Invalid NPA/NXX');
                            currentElement.addClass('errorFieldBorderColor');
                        }
                    } else {
                        parentElement.find('.errorText').remove();
                        currentElement.removeClass('errorFieldBorderColor');
                    }
                }
                else if(typeOfField == 'CNAMFieldKeyUp' || typeOfField == 'CNAMFieldBlur'){
                    if(enteredValue.length > 0){
                        if(enteredValue.length > 15){
                            parentElement.append(errorMsg);
                            parentElement.find('.errorText').text('Maximum 15 characters');
                            currentElement.addClass('errorFieldBorderColor');
                        }else{
                            parentElement.find('.errorText').remove();
                            currentElement.removeClass('errorFieldBorderColor');
                        }
                    }else{
                        if(typeOfField == 'CNAMFieldBlur'){
                            parentElement.append(errorMsg);
                            parentElement.find('.errorText').text('Cannot be blank');
                            currentElement.addClass('errorFieldBorderColor');
                        }
                    }
                }else if(typeOfField == 'DirectoryListingCategory'){
                    if(enteredValue.length > 0){
                        if(enteredValue.charAt(0) === ' '){
                            parentElement.append(errorMsg);
                            currentElement.addClass('errorFieldBorderColor');
                            parentElement.find('.errorText').text('Cannot begin with a space');
                        }else if(enteredValue.length > 50){
                            parentElement.append(errorMsg);
                            parentElement.find('.errorText').text('Maximum 50 Characters');
                            currentElement.addClass('errorFieldBorderColor');
                        }else{
                            parentElement.find('.errorText').remove();
                            currentElement.removeClass('errorFieldBorderColor');
                        }
                    }else{
                        parentElement.append(errorMsg);
                        parentElement.find('.errorText').text('Cannot be blank');
                        currentElement.addClass('errorFieldBorderColor');
                    }
                }else if(typeOfField == 'DirectoryListingName'){
                    if(enteredValue.length > 0){
                        if(enteredValue.charAt(0) === ' '){
                            parentElement.append(errorMsg);
                            currentElement.addClass('errorFieldBorderColor');
                            parentElement.find('.errorText').text('Cannot begin with a space');
                        }else if(enteredValue.length > 75){
                            parentElement.append(errorMsg);
                            parentElement.find('.errorText').text('Maximum 75 characters');
                            currentElement.addClass('errorFieldBorderColor');
                        }else{
                            parentElement.find('.errorText').remove();
                            currentElement.removeClass('errorFieldBorderColor');
                        }
                    }else{
                        parentElement.append(errorMsg);
                        parentElement.find('.errorText').text('Cannot be blank');
                        currentElement.addClass('errorFieldBorderColor');
                    }
                }else if(typeOfField == 'dropDownSelection'){
                    var currentElement = $('select[name="' + elementName + '"]');
                    var parentElement = currentElement.parent();
                    parentElement.find('.errorText').remove();
                    currentElement.removeClass('errorFieldBorderColor');
                    if((enteredValue == 'Select') || (enteredValue == '')){
                        parentElement.append(errorMsg);
                        parentElement.find('.errorText').text('Selection required');
                        currentElement.addClass('errorFieldBorderColor');
                    }else{
                        parentElement.find('.errorText').remove();
                        currentElement.removeClass('errorFieldBorderColor');
                    }
                }else if(typeOfField == 'radioSelection'){
                    var parentElement = $('input[name="' + elementName + '"]').parents( "fieldset" );
                    parentElement.find('.errorText').remove();
                }else  if(typeOfField == 'StaticIPVoiceOnly' || typeOfField == 'StaticIPVoiceData'){
                    if(enteredValue.length > 0){
                        if($.isNumeric(enteredValue)){
                            if(typeOfField == 'StaticIPVoiceOnly'){
                        if(enteredValue > 20 || enteredValue < 1){
                            parentElement.append(errorMsg);
                            parentElement.find('.errorText').text('Minimum of 1 and maximum of 20');
                            currentElement.addClass('errorFieldBorderColor');
                        }else if(enteredValue.charAt(0) === ' '){
                            parentElement.append(errorMsg);
                            parentElement.find('.errorText').text('Cannot begin with a space');
                            currentElement.addClass('errorFieldBorderColor');
                        }else{
                            parentElement.find('.errorText').remove();
                            currentElement.removeClass('errorFieldBorderColor');                    
                                } 
                            }else if(typeOfField == 'StaticIPVoiceData'){
                                if(enteredValue > 20 || enteredValue < 6){
                                    parentElement.append(errorMsg);
                                    parentElement.find('.errorText').text('Minimum of 6 and maximum of 20');
                                    currentElement.addClass('errorFieldBorderColor');
                                }else if(enteredValue.charAt(0) === ' '){
                                    parentElement.append(errorMsg);
                                    parentElement.find('.errorText').text('Cannot begin with a space');
                                    currentElement.addClass('errorFieldBorderColor');
                                }else{
                                    parentElement.find('.errorText').remove();
                                    currentElement.removeClass('errorFieldBorderColor');                    
                                }                            
                            }                           
                        }else{
                            parentElement.append(errorMsg);
                            parentElement.find('.errorText').text('Invalid number');
                            currentElement.addClass('errorFieldBorderColor');
                        }                    
                    }else{
                        parentElement.append(errorMsg);
                        parentElement.find('.errorText').text('Cannot be blank');
                        currentElement.addClass('errorFieldBorderColor');
                    }
                }else if (typeOfField == 'PBXVendororManufacturer') {
                    if(enteredValue.length > 0){
                        if(enteredValue.charAt(0) === ' '){
                            parentElement.append(errorMsg);
                            parentElement.find('.errorText').text('Cannot begin with a space');
                            currentElement.addClass('errorFieldBorderColor');
                        }else if(enteredValue.length > 20){
                            parentElement.append(errorMsg);
                            parentElement.find('.errorText').text('Maximum 20 Characters');
                            currentElement.addClass('errorFieldBorderColor');
                        }else{
                            parentElement.find('.errorText').remove();
                            currentElement.removeClass('errorFieldBorderColor');
                        }                       
                    }else{
                        parentElement.append(errorMsg);
                        parentElement.find('.errorText').text('Cannot be blank');
                        currentElement.addClass('errorFieldBorderColor');
                    }
                }else if(typeOfField == 'PBXModel'){
                    if(enteredValue.length > 0){
                        if(enteredValue.charAt(0) === ' '){
                            parentElement.append(errorMsg);
                            parentElement.find('.errorText').text('Cannot begin with a space');
                            currentElement.addClass('errorFieldBorderColor');
                        }else if(enteredValue.length > 20){
                            parentElement.append(errorMsg);
                            parentElement.find('.errorText').text('Maximum 20 Characters');
                            currentElement.addClass('errorFieldBorderColor');
                        }else{
                            parentElement.find('.errorText').remove();
                            currentElement.removeClass('errorFieldBorderColor');
                        }                       
                    }else{
                        parentElement.append(errorMsg);
                        parentElement.find('.errorText').text('Cannot be blank');
                        currentElement.addClass('errorFieldBorderColor');
                    }
                }else if(typeOfField == 'PBXSoftwareVersion'){
                    if(enteredValue.length > 0){
                        if(enteredValue.charAt(0) === ' '){
                            parentElement.append(errorMsg);
                            parentElement.find('.errorText').text('Cannot begin with a space');
                            currentElement.addClass('errorFieldBorderColor');
                        }else if(enteredValue.length > 10){
                            parentElement.append(errorMsg);
                            parentElement.find('.errorText').text('Maximum 10 Characters');
                            currentElement.addClass('errorFieldBorderColor');
                        }else{
                            parentElement.find('.errorText').remove();
                            currentElement.removeClass('errorFieldBorderColor');
                        }                       
                    }else{
                        parentElement.append(errorMsg);
                        parentElement.find('.errorText').text('Cannot be blank');
                        currentElement.addClass('errorFieldBorderColor');
                    }
                }else if(typeOfField == 'Address'){
                    if(enteredValue.length > 0){
                        if(enteredValue.charAt(0) === ' '){
                            parentElement.append(errorMsg);
                            parentElement.find('.errorText').text('Cannot begin with a space');
                            currentElement.addClass('errorFieldBorderColor');
                        }else{
                            parentElement.find('.errorText').remove();
                            currentElement.removeClass('errorFieldBorderColor');
                        }
                    }else{
                        parentElement.append(errorMsg);
                        parentElement.find('.errorText').text('Cannot be blank');
                        currentElement.addClass('errorFieldBorderColor');
                    }
                }else if(typeOfField == 'city'){
                    if(enteredValue.length > 0){
                        if(enteredValue.charAt(0) === ' '){
                            parentElement.append(errorMsg);
                            parentElement.find('.errorText').text('Cannot begin with a space');
                            currentElement.addClass('errorFieldBorderColor');
                        }else{
                            parentElement.find('.errorText').remove();
                            currentElement.removeClass('errorFieldBorderColor');
                        }
                    }else{
                        parentElement.append(errorMsg);
                        parentElement.find('.errorText').text('Cannot be blank');
                        currentElement.addClass('errorFieldBorderColor');
                    }                
                }else if(typeOfField == 'zipCode'){
                    if(enteredValue.length > 0){
                        if(enteredValue.indexOf(' ') >= 0 || !($.isNumeric(enteredValue))){
                            parentElement.append(errorMsg);
                            parentElement.find('.errorText').text('Invalid Zip Code');
                            currentElement.addClass('errorFieldBorderColor');
                        }else if(enteredValue.length < 5 && $.isNumeric(enteredValue)){
                            parentElement.append(errorMsg);
                            parentElement.find('.errorText').text('Zip must be five digits');
                            currentElement.addClass('errorFieldBorderColor');
                        }else{
                            parentElement.find('.errorText').remove();
                            currentElement.removeClass('errorFieldBorderColor');
                        }                    
                    }else{
                        parentElement.append(errorMsg);
                        parentElement.find('.errorText').text('Cannot be blank');
                        currentElement.addClass('errorFieldBorderColor');
                    }                
                }else if(typeOfField == 'floorNumber'){
                        if(enteredValue.charAt(0) === ' '){
                            parentElement.append(errorMsg);
                            parentElement.find('.errorText').text('Cannot begin with a space');
                            currentElement.addClass('errorFieldBorderColor');
                        }else{
                            parentElement.find('.errorText').remove();
                            currentElement.removeClass('errorFieldBorderColor');
                        }                    
                }else if(typeOfField == 'roomNumber'){
                        if(enteredValue.charAt(0) === ' '){
                            parentElement.append(errorMsg);
                            parentElement.find('.errorText').text('Cannot begin with a space');
                            currentElement.addClass('errorFieldBorderColor');
                        }else{
                            parentElement.find('.errorText').remove();
                            currentElement.removeClass('errorFieldBorderColor');
                    }                
                }else if(typeOfField == 'dateField'){
                    if(enteredValue.length > 0){
                        parentElement.find('.errorText').remove();
                        currentElement.removeClass('errorFieldBorderColor'); 
                    }else{
                        parentElement.append(errorMsg);
                        parentElement.find('.errorText').text('Cannot be blank');
                        currentElement.addClass('errorFieldBorderColor');
                    }
                }else if(typeOfField == 'CSRFile'){
                    $('.CSRFile').find('.errorText').remove();
                    $('#filePath').removeClass('errorFieldBorderColor');
                }
                checkIfSubmitBtnCanBeEnabled(); 
            }
        }
    
        function checkIfSubmitBtnCanBeEnabled(){
            if(isIPFlexEnabled == 'true'){
                if(MISRDSPageNumber == '1'){
                    if(MISRDSPage2Status == 'completelyFilled' && MISRDSPage3Status == 'completelyFilled'){
                        checkForEnablingSubmitBtn('MISRDSPage1');
                    }
                }else if(MISRDSPageNumber == '2'){
                    if(MISRDSPage1Status == 'completelyFilled' && MISRDSPage3Status == 'completelyFilled'){
                        checkForEnablingSubmitBtn('MISRDSPage2'); 
                    }
                }else{
                    if(MISRDSPage1Status == 'completelyFilled' && MISRDSPage2Status == 'completelyFilled'){
                        checkForEnablingSubmitBtn('MISRDSPage3'); 
                    }
                }           
            }else{
                 checkForEnablingSubmitBtn('MISRDSPage1');
            }
        }
    
        function checkForEnablingSubmitBtn(classNameOFPage){
            var enableSubmitBtn = true;
            
            //validation for input fields
            $('.'+classNameOFPage+' input.required').each(function() {
                if($(this).parent().children('.errorText').length > 0){
                    enableSubmitBtn = false;
                }else if($(this).parent().attr("class") == 'CSRFile'){
                    if(Object.keys(CSRFilesObject).length === 2){
                        enableSubmitBtn = false;
                    }
                }else{
                    if(!$(this).val()){
                        enableSubmitBtn = false;
                    }                
                }
            });
            
            //validation for radio buttons
            $('.'+classNameOFPage+' fieldset table.required').each(function() {
                if($(this).parent().children('.errorText').length > 0){
                    enableSubmitBtn = false;
                }else{
                    if ($(this).find('input:radio:checked').length === 0){
                        enableSubmitBtn = false;
                    }                
                }                
            }); 
            
            // validation for Dropdowns
            $('.'+classNameOFPage+' select.required').each(function() {
                if($(this).parent().children('.errorText').length > 0){
                    enableSubmitBtn = false;
                }else{
                    if(!$(this).val()){
                        enableSubmitBtn = false;
                    }               
                }                 
            });
            
            if(enableSubmitBtn){
                $('.SubmitBtn').prop('disabled', false);              
            }else{
                $('.SubmitBtn').prop('disabled', true);
            }   
        }    
    </script>

    <script>
        // Function to enable trimLeft in IE
        String.prototype.trimLeft = function () {
            return this.replace(/^\s+/, "");
        }
        
        function addLeftPanelScroll(){
            //Get height
            var tableHeight=0;
            var leftPanelRowLength = $("#finalSites tbody").children('tr').length;
            if(leftPanelRowLength != null && leftPanelRowLength>8){
                for(var i=0; i<8; i++){
                    tableHeight = tableHeight +$("#finalSites").children('div.panel-heading').eq(i).outerHeight();
                }
                $('#finalSites').css('max-height',tableHeight);   
            }
        }

        var goToSiteId='';
        function getSiteId(siteId,currentPageNumber){
            goToSiteId=siteId;
            var pageStatus;
            if(currentPageNumber == 1){
                doFirstPageValidation('onSaveAndClose','MISRDSPage'+currentPageNumber);
            }else{
                doPageValidation('onSaveAndClose','MISRDSPage'+currentPageNumber);
            }
            pageStatus = validation?'completelyFilled':'partiallyFilled';
            console.log('On Navigation to Different Site page status ==',pageStatus);                
            passSite(goToSiteId.toString(),'page'+currentPageNumber,pageStatus);                    
        } 
    
        function saveAndExit(siteId,currentPageNumber){
            saveSiteId=siteId;
            var pageStatus;
            if(currentPageNumber == 1){
                doFirstPageValidation('onSaveAndClose','MISRDSPage'+currentPageNumber);
            }else{
                doPageValidation('onSaveAndClose','MISRDSPage'+currentPageNumber);
            }
            pageStatus = validation?'completelyFilled':'partiallyFilled';
            console.log('OnSave and Close Page Status == ',pageStatus);                
            ajaxSaveAndExit(saveSiteId.toString(),'page'+currentPageNumber,pageStatus);
        }
    
        function viewNextSite(currentPageNumber){
            var pageStatus;
            if(currentPageNumber == 1){
                doFirstPageValidation('onNextSiteBtnClick','MISRDSPage'+currentPageNumber);
            }else{
                doPageValidation('onNextSiteBtnClick','MISRDSPage'+currentPageNumber);
            }
            pageStatus = validation?'completelyFilled':'partiallyFilled';
            console.log('OnSave and Close Page Status == ',pageStatus);
            takeToNextSite('page'+currentPageNumber,pageStatus);
        }
    
        function SubmitBtnClick(siteId,currentPageNumber){
            saveSiteId=siteId;
            var pageStatus;
            if(currentPageNumber == 1){
                doFirstPageValidation('onSubmitBtnClick','MISRDSPage'+currentPageNumber);
            }else{
                doPageValidation('onSubmitBtnClick','MISRDSPage'+currentPageNumber);
            }
            pageStatus = validation?'completelyFilled':'partiallyFilled';
            console.log('OnSubmit Btn Click Page Status == ',pageStatus);
            rdsFlag = validation;
            saveCompleteRDS('page'+currentPageNumber,pageStatus,rdsFlag.toString());
        } 

        $(document).ready(function () {
            drawLeftPanel();
            
            $(window).resize(function() {
                drawLeftPanel();
            });
        });

        function drawLeftPanel() {
            console.log('inside drawLeftPanel');
            var leftPanelOffSet;
            var leftPanelWidth;
            var leftPanelHeight;
            var headerHeight;
            var footerOffSet;
            var panelPosition;
            var scrollPos;
            var leftPanelBottomOffset;
            
            $("#leftPanelContainer").removeAttr('style');
            $('#leftPanelContainer').css({'z-index':'1','min-width': '280px'});
            var siteAddressDiv = $("#finalSites").find(".panel-heading:last");
            siteAddressDiv.removeClass("panel-heading p10 omesmedium dashborder");
            siteAddressDiv.addClass("panel-heading p10 omesmedium");
            addLeftPanelScroll();
            
            //scroll site panel-heading
            $(window).scroll(function(){
                leftPanelOffSet=$("#leftPanelContainer").offset().top;
                leftPanelWidth=$("#leftPanelContainer").outerWidth();
                leftPanelHeight=$("#leftPanelContainer").height();
                headerHeight=$('#top_nav_bar').height();
                footerOffSet=$('#panelFooter').offset().top;
                panelPosition=footerOffSet-leftPanelHeight;
                scrollPos=$(window).scrollTop()+headerHeight; 
                leftPanelBottomOffset= scrollPos + leftPanelHeight;
                var WidthOfLeftPanel =  leftPanelWidth - 0.5;                       
                if(scrollPos >= 410){
                    $("#pagePanel").css({'float':'right'});
                    $("#leftPanelContainer").css({'position':'fixed','top':headerHeight+'px','width':WidthOfLeftPanel+'px'});                    
                }else{
                    $("#leftPanelContainer").css({"position":"relative","top":"0px"});
                }
                      
                if(leftPanelBottomOffset >= footerOffSet){
                    $("#leftPanelContainer").css({"position":"absolute","top":panelPosition+'px'});
                }
            });
            //end of scroll
        }    

        var region = '{!VASARegion}';
        var maxDateValue = 0;
        var progressbar = $("#progressbar"),
            progressLabel = $(".progress-label");
        var attHolidays = {!Holidays};
        console.log(attHolidays);
        var attHolidaysLength = attHolidays.length;
        var BDDStr = "{!minDate}";
        console.log('BDDStr: '+BDDStr);

        function holidays(date) {
            for (i = 0; i < attHolidaysLength; i++) {
                if (date.getMonth() == attHolidays[i][0] - 1 && date.getDate() == attHolidays[i][1] && date.getFullYear() == attHolidays[i][2]) {
                    return [false, '', attHolidays[i][3]];
                }
            }
            return [true, ''];
        }

        function isHoliday(date) {
            for (i = 0; i < attHolidaysLength; i++) {
                if (date.getMonth() == attHolidays[i][0] - 1 && date.getDate() == attHolidays[i][1] && date.getFullYear() == attHolidays[i][2]) {
                    return false;
                }
            }
            return true;
        }

        function noWeekendsOrHolidays(date) {
            var noWeekend = $.datepicker.noWeekends(date);
            if (noWeekend[0]) {
                return holidays(date);
            } else {
                return noWeekend;
            }
        }
    
        $(document).ready(function () {
            progressbar.progressbar({
                value: {!OverallCompletion},
                change: function () {
                    progressLabel.text(progressbar.progressbar("value") + "%");
                }
            });
            setBestAvailDate(BDDStr);
            initiateCalender();
            highlightCurrentSite(); 
        });              

        function initiateCalender(){
            $(".dPicker").datepicker({
                numberOfMonths: 2,
                beforeShowDay: noWeekendsOrHolidays,
                minDate: "{!minDate}",
                maxDate: "{!maxDate}"
            });
        
            $(".calendarIcon").on("click", function () {
                $('.dPicker').focus();
            });
        }    

        function validateMD5PasswordField(){    
            var errorMsg = "<div class='m-t-10 errorText'></div>";
            var currentElement = $('.passwordFieldSelectorMD5');
            var parentElement = currentElement.parent();
            
            var pValue = currentElement.val();
            parentElement.find('.errorText').remove();
            
            if(typeof pValue != 'undefined'){
                if ("" === pValue) {
                    parentElement.append(errorMsg);
                    parentElement.find('.errorText').text('Password cannot be blank');
                    jQuery('[id$=pwdv4conf]').prop('disabled', true);
                }else if(pValue.length<8 || pValue.search(/[A-Z]/) < 0 || pValue.search(/[0-9]/) < 0){
                    parentElement.append(errorMsg);
                    parentElement.find('.errorText').text('Must be 8 - 16 characters, contain 1 number and 1 uppercase letter.');
                    jQuery('[id$=pwdv4conf]').prop('disabled', true);
                }else{
                    parentElement.find('.errorText').remove();
                    jQuery('[id$=pwdv4conf]').prop('disabled', false);
                }            
                checkIfSubmitBtnCanBeEnabled();
            }
        }

        function validateMD5PasswordFieldV6(){
            var errorMsg = "<div class='m-t-10 errorText'></div>";
            var currentElement = $('.passwordFieldSelectorMD5V6');
            var parentElement = currentElement.parent();
            var sValue = currentElement.val();
            parentElement.find('.errorText').remove();
            
            if(typeof sValue != 'undefined'){
                if ("" === sValue) {
                    parentElement.append(errorMsg);
                    parentElement.find('.errorText').text('Password cannot be blank');
                    jQuery('[id$=pwdv6conf]').prop('disabled', true);
                }else if(sValue.length<8 || sValue.search(/[A-Z]/) < 0 || sValue.search(/[0-9]/) < 0){
                    parentElement.append(errorMsg);
                    parentElement.find('.errorText').text('Must be 8 - 16 characters, contain 1 number and 1 uppercase letter.');
                    jQuery('[id$=pwdv6conf]').prop('disabled', true);
                }else{
                    parentElement.find('.errorText').remove();
                    jQuery('[id$=pwdv6conf]').prop('disabled', false);
                }            
                checkIfSubmitBtnCanBeEnabled();
            }
        }

        function checkCIError(){
            var errorMsgCI = jQuery('[id$=ciError]').val();
            var ciErrMsg = document.getElementById("dispCIMsgId");
            if(errorMsgCI != ''){    
                ciErrMsg.innerHTML = '<h style="color:red;font-weight:bold;">'+errorMsgCI+'</h>';
                
                $('html, body').animate({
                    scrollTop: $('#customerDetailsTable').offset().top
                },1000);
                
                var md5v4 = jQuery('[id$=pwdv4]').val();
                var md5v4re = jQuery('[id$=pwdv4conf]').val();
                if((md5v4!='') || (md5v4!=null)){
                    jQuery('[id$=pwdv4]').val('');
                    jQuery('[id$=pwdv4conf]').val('');
                }
                
                var md5v6 = jQuery('[id$=pwdv6]').val();
                var md5v6re = jQuery('[id$=pwdv6conf]').val();
                if((md5v6!='') || (md5v6!=null)){
                    jQuery('[id$=pwdv4]').val('');
                    jQuery('[id$=pwdv4conf]').val('');
                }
            }else{
                ciErrMsg.innerHTML="";
            }
            
        } 

        function checkSpaceOnly(e){
            var unicode=e.charCode? e.charCode : e.keyCode
            if (unicode!=8){ //if the key isn't the backspace key (which we should allow)
                if (unicode==32) //if not a number
                    return false; //disable key press
            }
        }

        function highlightCurrentSite(){
            var winURL=window.location.href;
            if(winURL.indexOf("siteid=") < 0){
                    document.getElementById("pagePanel").style.display="none";
                if(winURL.indexOf("quoteid=") < 0){
                    winURL=winURL.replace(/&.*&/, '&')+ '?quoteid='+"{!ATTquoteid}"+ '&siteid='+"{!siteselected}";
                }
                else{
                    winURL=winURL.replace(/&.*&/, '&')+ '&siteid='+"{!siteselected}";
                }
                window.location.href=winURL;
            }
        }                           
    </script>

</apex:page>